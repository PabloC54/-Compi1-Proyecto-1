package Analyzers;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
  /*
    ESTRUCTURAS PARA EXPRESIONES REGULARES (ÁRBOLES), 
  */

    private ArrayList<ArrayList<String>> Conjuntos = new ArrayList<>();
    private ArrayList<ArrayList<String>> Expresiones = new ArrayList<>();
    private ArrayList<ArrayList<String>> Comparaciones = new ArrayList<>();
    private ArrayList<ArrayList<String>> Errores = new ArrayList<>();
        
    private ArrayList<String> expresion = new ArrayList<>();

    public ArrayList getConjuntos(){
        return Conjuntos;
    }  

    public ArrayList getExpresiones(){
        return Expresiones;
    }  

    public ArrayList getComparaciones(){
        return Comparaciones;
    }  

    public ArrayList getErrores(){
        return Errores;
    }   

    private void Conjunto(String id, String definicion){
        ArrayList<String> v = new ArrayList<>();
        v.add(id);
        v.add(definicion);
        Conjuntos.add(v);  
    }

    private void Expresion(String id){
        expresion.add(0, id);
        Expresiones.add(expresion);
        expresion = new ArrayList<>();
    }

    private void Termino(String operacion){
        expresion.add(0, operacion);
    }

    private void Termino(String a, String b){
        expresion.add(0, a);
        expresion.add(0, b);
    }

    private void Comparacion(String expresion, String string){
        ArrayList<String> v = new ArrayList<>();
        v.add(expresion);
        v.add(string);
        Comparaciones.add(v);
    }

    public void syntax_error(Symbol s){ 
        ArrayList<String> v = new ArrayList<>();
        v.add(String.valueOf(s.left));
        v.add(String.valueOf(s.right));
        v.add(String.valueOf(s.value));
        Errores.add(v);
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }
:}

terminal String L;
terminal String L_set, D_set, A_set;
terminal String llaveA, llaveB;
terminal String dospuntos, puntocoma, flecha;
terminal String concat, disy, cerr_kleene, cerr_positiva, cerr_bool;
terminal String especial;
terminal String porcentajes;
terminal String conj;
terminal String id;
terminal String string;

non terminal INI, S, C;
non terminal DEFINICION_CONJUNTO, DEFINICION_EXPRESION_REGULAR, COMPARACION;
non terminal CONJUNTO, EXPRESION_REGULAR;
non terminal TERMINO;

precedence left concat, disy;
precedence right cerr_kleene, cerr_positiva, cerr_bool;

start with INI;

INI ::=
  llaveA S porcentajes C llaveB
;

S ::= 
  DEFINICION_CONJUNTO S
| DEFINICION_EXPRESION_REGULAR S
| /*empty*/
;

C ::=
  DEFINICION_CONJUNTO C
| COMPARACION C
| /*empty*/
;

DEFINICION_CONJUNTO ::=
  conj dospuntos id:a flecha CONJUNTO:b puntocoma  {:Conjunto(a, (String) b);:}
;

CONJUNTO ::=
  L_set:a                                       {:RESULT=a;:}
| D_set:a                                       {:RESULT=a;:}
| A_set:a                                       {:RESULT=a;:}
;

DEFINICION_EXPRESION_REGULAR ::= 
  id:a flecha EXPRESION_REGULAR puntocoma       {:Expresion(a);:}
;

EXPRESION_REGULAR ::=
  concat EXPRESION_REGULAR EXPRESION_REGULAR    {:Termino(".");:}
| disy EXPRESION_REGULAR EXPRESION_REGULAR      {:Termino("|");:}
| cerr_kleene EXPRESION_REGULAR                 {:Termino("*");:}
| cerr_positiva EXPRESION_REGULAR               {:Termino("+");:}
| cerr_bool EXPRESION_REGULAR                   {:Termino("?");:}
| TERMINO                                        
;

TERMINO ::=
  L:a                                           {:Termino(a);:}
| string:a                                      {:Termino(a);:}
| llaveA id:a llaveB                            {:Termino(a);:}
| especial:a                                    {:Termino(a);:}
;

COMPARACION ::= id:a dospuntos string:b puntocoma {:Comparacion(a, (String) b);:}
;


