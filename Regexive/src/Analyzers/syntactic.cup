package Analyzers;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
    private ArrayList<ArrayList<String>> Sets = new ArrayList<>();
    private ArrayList<ArrayList<String>> Expressions = new ArrayList<>();
    private ArrayList<ArrayList<String>> Comparations = new ArrayList<>();
    private ArrayList<ArrayList<String>> Errors = new ArrayList<>();
        
    private ArrayList<String> expression = new ArrayList<>();

    public ArrayList getSets(){
        return Sets;
    }

    public ArrayList getExpressions(){
        return Expressions;
    }  

    public ArrayList getComparations(){
        return Comparations;
    }  

    public ArrayList getErrors(){
        return Errors;
    }   

    private void Set(String id, String definition){
        ArrayList<String> v = new ArrayList<>();
        v.add(id);
        v.add(definition);
        Sets.add(v);  
    }

    private void Expression(String id){
        expression.add(0, id);
        Expressions.add(expression);
        expression=new ArrayList<>();
    }

    private void Comparation(String expression, String string){
        ArrayList<String> v = new ArrayList<>();
        v.add(expression);
        v.add(string);
        Comparations.add(v);
    }

    public void syntax_error(Symbol s){ 
        ArrayList<String> v = new ArrayList<>();
        v.add(String.valueOf(s.left));
        v.add(String.valueOf(s.right));
        v.add(String.valueOf(s.value));
        Errors.add(v);
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }
:}

terminal String L;
terminal String L_set, D_set, A_set;
terminal String llaveA, llaveB;
terminal String dospuntos, puntocoma, flecha;
terminal String concat, disy, cerr_kleene, cerr_positiva, cerr_bool;
terminal String especial;
terminal String porcentajes;
terminal String conj;
terminal String id;
terminal String string;

non terminal INI, S, C;
non terminal DEFINICION_CONJUNTO, DEFINICION_EXPRESION_REGULAR, COMPARACION;
non terminal CONJUNTO, EXPRESION_REGULAR;
non terminal TERMINO;

precedence left concat, disy;
precedence right cerr_kleene, cerr_positiva, cerr_bool;

start with INI;

INI ::=
  llaveA S porcentajes C llaveB
;

S ::= 
  DEFINICION_CONJUNTO S
| DEFINICION_EXPRESION_REGULAR S
| error S
| /*empty*/
;

C ::=
  DEFINICION_CONJUNTO C
| COMPARACION C
| error C
| /*empty*/
;

DEFINICION_CONJUNTO ::=
  conj dospuntos id:a flecha CONJUNTO:b puntocoma  {:Set(a, (String) b);:}
;

CONJUNTO ::=
  L_set:a                                          {:RESULT=a;:}
| D_set:a                                          {:RESULT=a;:}
| A_set:a                                          {:RESULT=a;:}
;

DEFINICION_EXPRESION_REGULAR ::= 
  id:a flecha EXPRESION_REGULAR puntocoma          {:Expression(a);:}
;

EXPRESION_REGULAR ::=
  concat:a EXPRESION_REGULAR EXPRESION_REGULAR       {:expression.add(0, a);:}
| disy:a EXPRESION_REGULAR EXPRESION_REGULAR         {:expression.add(0, a);:}
| cerr_kleene:a EXPRESION_REGULAR                    {:expression.add(0, a);:}
| cerr_positiva:a EXPRESION_REGULAR                  {:expression.add(0, a);:}
| cerr_bool:a EXPRESION_REGULAR                      {:expression.add(0, a);:}
| TERMINO                                     
;

TERMINO ::=
  L:a                                              {:expression.add(0, a);:}
| string:a                                         {:expression.add(0, a);:}
| llaveA id:a llaveB                               {:expression.add(0, a);:}
| especial:a                                       {:expression.add(0, a);:}
;

COMPARACION ::= id:a dospuntos string:b puntocoma  {:Comparation(a, (String) b);:}
;
