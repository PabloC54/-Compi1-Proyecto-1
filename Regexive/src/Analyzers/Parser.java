//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
        = unpackFromStrings(new String[]{
        "\000\027\000\002\002\004\000\002\002\007\000\002\003"
        + "\004\000\002\003\004\000\002\003\004\000\002\003\002"
        + "\000\002\004\004\000\002\004\004\000\002\004\004\000"
        + "\002\004\002\000\002\005\010\000\002\006\006\000\002"
        + "\010\005\000\002\010\005\000\002\010\004\000\002\010"
        + "\004\000\002\010\004\000\002\010\003\000\002\011\003"
        + "\000\002\011\003\000\002\011\005\000\002\011\003\000"
        + "\002\007\006"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
        = unpackFromStrings(new String[]{
        "\000\065\000\004\006\004\001\002\000\012\003\010\021"
        + "\ufffc\022\014\023\013\001\002\000\004\002\006\001\002"
        + "\000\004\002\001\001\002\000\012\003\010\021\ufffc\022"
        + "\014\023\013\001\002\000\012\003\010\021\ufffc\022\014"
        + "\023\013\001\002\000\004\021\051\001\002\000\012\003"
        + "\010\021\ufffc\022\014\023\013\001\002\000\004\012\022"
        + "\001\002\000\004\010\015\001\002\000\004\023\016\001"
        + "\002\000\004\012\017\001\002\000\004\005\020\001\002"
        + "\000\004\011\021\001\002\000\014\003\ufff7\007\ufff7\021"
        + "\ufff7\022\ufff7\023\ufff7\001\002\000\024\004\032\006\023"
        + "\013\034\014\025\015\024\016\035\017\030\020\026\024"
        + "\027\001\002\000\004\023\046\001\002\000\024\004\032"
        + "\006\023\013\034\014\025\015\024\016\035\017\030\020"
        + "\026\024\027\001\002\000\024\004\032\006\023\013\034"
        + "\014\025\015\024\016\035\017\030\020\026\024\027\001"
        + "\002\000\026\004\uffec\006\uffec\011\uffec\013\uffec\014\uffec"
        + "\015\uffec\016\uffec\017\uffec\020\uffec\024\uffec\001\002\000"
        + "\026\004\uffee\006\uffee\011\uffee\013\uffee\014\uffee\015\uffee"
        + "\016\uffee\017\uffee\020\uffee\024\uffee\001\002\000\024\004"
        + "\032\006\023\013\034\014\025\015\024\016\035\017\030"
        + "\020\026\024\027\001\002\000\004\011\041\001\002\000"
        + "\026\004\uffef\006\uffef\011\uffef\013\uffef\014\uffef\015\uffef"
        + "\016\uffef\017\uffef\020\uffef\024\uffef\001\002\000\026\004"
        + "\ufff0\006\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0"
        + "\017\ufff0\020\ufff0\024\ufff0\001\002\000\024\004\032\006"
        + "\023\013\034\014\025\015\024\016\035\017\030\020\026"
        + "\024\027\001\002\000\024\004\032\006\023\013\034\014"
        + "\025\015\024\016\035\017\030\020\026\024\027\001\002"
        + "\000\026\004\ufff2\006\ufff2\011\ufff2\013\ufff2\014\ufff2\015"
        + "\ufff2\016\ufff2\017\ufff2\020\ufff2\024\ufff2\001\002\000\024"
        + "\004\032\006\023\013\034\014\025\015\024\016\035\017"
        + "\030\020\026\024\027\001\002\000\026\004\ufff5\006\ufff5"
        + "\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020"
        + "\ufff5\024\ufff5\001\002\000\012\003\ufff6\021\ufff6\022\ufff6"
        + "\023\ufff6\001\002\000\026\004\ufff1\006\ufff1\011\ufff1\013"
        + "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\024\ufff1"
        + "\001\002\000\024\004\032\006\023\013\034\014\025\015"
        + "\024\016\035\017\030\020\026\024\027\001\002\000\026"
        + "\004\ufff4\006\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016"
        + "\ufff4\017\ufff4\020\ufff4\024\ufff4\001\002\000\026\004\ufff3"
        + "\006\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017"
        + "\ufff3\020\ufff3\024\ufff3\001\002\000\004\007\047\001\002"
        + "\000\026\004\uffed\006\uffed\011\uffed\013\uffed\014\uffed\015"
        + "\uffed\016\uffed\017\uffed\020\uffed\024\uffed\001\002\000\004"
        + "\021\uffff\001\002\000\012\003\052\007\ufff8\022\014\023"
        + "\056\001\002\000\012\003\052\007\ufff8\022\014\023\056"
        + "\001\002\000\012\003\052\007\ufff8\022\014\023\056\001"
        + "\002\000\012\003\052\007\ufff8\022\014\023\056\001\002"
        + "\000\004\007\062\001\002\000\004\010\057\001\002\000"
        + "\004\024\060\001\002\000\004\011\061\001\002\000\012"
        + "\003\uffeb\007\uffeb\022\uffeb\023\uffeb\001\002\000\004\002"
        + "\000\001\002\000\004\007\ufffa\001\002\000\004\007\ufffb"
        + "\001\002\000\004\007\ufff9\001\002\000\004\021\ufffd\001"
        + "\002\000\004\021\ufffe\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
        = unpackFromStrings(new String[]{
        "\000\065\000\004\002\004\001\001\000\010\003\010\005"
        + "\011\006\006\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\003\066\005\011\006\006\001\001\000\010\003"
        + "\065\005\011\006\006\001\001\000\002\001\001\000\010"
        + "\003\047\005\011\006\006\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\006\010"
        + "\030\011\032\001\001\000\002\001\001\000\006\010\044"
        + "\011\032\001\001\000\006\010\042\011\032\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\010\041\011\032"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\006\010\036\011\032\001\001\000\006\010\035"
        + "\011\032\001\001\000\002\001\001\000\006\010\037\011"
        + "\032\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\010\043\011\032\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\004\054\005\052\007\053\001"
        + "\001\000\010\004\064\005\052\007\053\001\001\000\010"
        + "\004\063\005\052\007\053\001\001\000\010\004\062\005"
        + "\052\007\053\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
        int act_num,
        java_cup.runtime.lr_parser parser,
        java.util.Stack stack,
        int top)
        throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    private ArrayList<ArrayList<String>> Sets = new ArrayList<>();
    private ArrayList<ArrayList<String>> Expressions = new ArrayList<>();
    private ArrayList<ArrayList<String>> Comparations = new ArrayList<>();
    private ArrayList<ArrayList<String>> Errors = new ArrayList<>();

    private ArrayList<String> expression = new ArrayList<>();

    public ArrayList getSets() {
        return Sets;
    }

    public ArrayList getExpressions() {
        return Expressions;
    }

    public ArrayList getComparations() {
        return Comparations;
    }

    public ArrayList getErrors() {
        return Errors;
    }

    private void Set(String id, String definition) {
        ArrayList<String> v = new ArrayList<>();
        v.add(id);
        v.add(definition);
        Sets.add(v);
    }

    private void Expression(String id) {
        expression.add(0, id);
        Expressions.add(expression);
        expression = new ArrayList<>();
    }

    private void Comparation(String expression, String string) {
        ArrayList<String> v = new ArrayList<>();
        v.add(expression);
        v.add(string);
        Comparations.add(v);
    }

    public void syntax_error(Symbol s) {
        ArrayList<String> v = new ArrayList<>();
        v.add(String.valueOf(s.left));
        v.add(String.valueOf(s.right));
        v.add(String.valueOf(s.value));
        Errors.add(v);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error síntactico irrecuperable en la Línea "
            + (s.left) + " Columna " + s.right + ". Componente " + s.value
            + " no reconocido.");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {

        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INI EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INI ::= llaveA S porcentajes C llaveB 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("INI", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // S ::= DEFINICION_CONJUNTO S 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // S ::= DEFINICION_EXPRESION_REGULAR S 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // S ::= error S 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // S ::= 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // C ::= DEFINICION_CONJUNTO C 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("C", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // C ::= COMPARACION C 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("C", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // C ::= error C 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("C", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // C ::= 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("C", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // DEFINICION_CONJUNTO ::= conj dospuntos id flecha set puntocoma 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Set(a, b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_CONJUNTO", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // DEFINICION_EXPRESION_REGULAR ::= id flecha EXPRESION_REGULAR puntocoma 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Expression(a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPRESION_REGULAR", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // EXPRESION_REGULAR ::= concat EXPRESION_REGULAR EXPRESION_REGULAR 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // EXPRESION_REGULAR ::= disy EXPRESION_REGULAR EXPRESION_REGULAR 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // EXPRESION_REGULAR ::= cerr_kleene EXPRESION_REGULAR 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // EXPRESION_REGULAR ::= cerr_positiva EXPRESION_REGULAR 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // EXPRESION_REGULAR ::= cerr_bool EXPRESION_REGULAR 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // EXPRESION_REGULAR ::= TERMINO 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REGULAR", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // TERMINO ::= L 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // TERMINO ::= string 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    expression.add(0, "\\" + a.substring(0, a.length() - 1) + "\\\"");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // TERMINO ::= llaveA id llaveB 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // TERMINO ::= especial 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    expression.add(0, a);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // COMPARACION ::= id dospuntos string puntocoma 
                {
                    Object RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String a = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    int bleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int bright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Comparation(a, (String) b);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARACION", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                        "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                CUP$Parser$act_num,
                CUP$Parser$parser,
                CUP$Parser$stack,
                CUP$Parser$top);
        }
    }

}
