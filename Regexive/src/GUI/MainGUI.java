/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialDeepOceanContrastIJTheme;
import java.awt.Color;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.Collections;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import util.CreateChildNodes;
import util.FileNode;

/**
 *
 * @author pablo
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form MiFrame
     */

    public static String main_path = System.getProperty("user.dir") + "\\src";

    public String file_name = "";
    public Boolean saved = true;
    public File file = new File("");

    public MainGUI() {
        FlatMaterialDeepOceanContrastIJTheme.install();
        initComponents();
        setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/icon/open-file-icon.png")).getImage());

        unsaved_label.setVisible(false);

        File fileRoot = new File(main_path + "\\data\\");
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new FileNode(fileRoot));
        DefaultTreeModel model = new DefaultTreeModel(root);
        data_tree.setModel(model);

        CreateChildNodes ccn
            = new CreateChildNodes(fileRoot, root);
        new Thread(ccn).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        input_text = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        file_name_label = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        output_text = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        generate_button = new javax.swing.JToggleButton();
        analize_button = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        data_tree = new javax.swing.JTree();
        image_label = new javax.swing.JLabel();
        previous_button = new javax.swing.JToggleButton();
        next_button = new javax.swing.JToggleButton();
        image_combobox = new javax.swing.JComboBox<>();
        unsaved_label = new javax.swing.JLabel();
        clear_button = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        new_dialog = new javax.swing.JMenuItem();
        open_dialog = new javax.swing.JMenuItem();
        save_dialog = new javax.swing.JMenuItem();
        saveas_dialog = new javax.swing.JMenuItem();
        generate_dialog = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        input_text.setColumns(20);
        input_text.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        input_text.setRows(5);
        input_text.setEnabled(false);
        input_text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_textKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(input_text);

        jLabel1.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        jLabel1.setText("Archivo de entrada:");

        file_name_label.setText("ninguno");

        output_text.setEditable(false);
        output_text.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        output_text.setForeground(new java.awt.Color(204, 204, 204));
        output_text.setFocusable(false);
        output_text.setName("output_text"); // NOI18N
        jScrollPane4.setViewportView(output_text);

        jLabel2.setText("Salida");

        generate_button.setText("Generar Autómata");
        generate_button.setEnabled(false);
        generate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_buttonActionPerformed(evt);
            }
        });

        analize_button.setText("Analizar Entrada");
        analize_button.setEnabled(false);
        analize_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analize_buttonActionPerformed(evt);
            }
        });

        data_tree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(data_tree);

        image_label.setBackground(new java.awt.Color(9, 11, 16));
        image_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image_label.setToolTipText("Clic para ver en grande");
        image_label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(132, 255, 255), 3, true));
        image_label.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        image_label.setOpaque(true);
        image_label.setVerifyInputWhenFocusTarget(false);
        image_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                image_labelMouseClicked(evt);
            }
        });

        previous_button.setText("Anterior");
        previous_button.setEnabled(false);

        next_button.setText("Siguiente");
        next_button.setEnabled(false);

        image_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Árboles", "Siguientes", "Transiciones", "Autómatas" }));
        image_combobox.setEnabled(false);

        unsaved_label.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        unsaved_label.setText("*");

        clear_button.setText("Limpiar");
        clear_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(analize_button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(generate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(previous_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(next_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(file_name_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unsaved_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(image_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(186, 186, 186))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(clear_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(image_label, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(file_name_label)
                        .addComponent(unsaved_label, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(image_combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(image_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(analize_button)
                    .addComponent(generate_button)
                    .addComponent(previous_button)
                    .addComponent(next_button))
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clear_button)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        new_dialog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        new_dialog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/new-file-icon.png"))); // NOI18N
        new_dialog.setText("Nuevo");
        new_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_dialogActionPerformed(evt);
            }
        });
        jMenu1.add(new_dialog);

        open_dialog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        open_dialog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/open-file-icon.png"))); // NOI18N
        open_dialog.setText("Abrir");
        open_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_dialogActionPerformed(evt);
            }
        });
        jMenu1.add(open_dialog);

        save_dialog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        save_dialog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save-file-icon.png"))); // NOI18N
        save_dialog.setText("Guardar");
        save_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_dialogActionPerformed(evt);
            }
        });
        jMenu1.add(save_dialog);

        saveas_dialog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveas_dialog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/save-as-icon.png"))); // NOI18N
        saveas_dialog.setText("Guardar como...");
        saveas_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveas_dialogActionPerformed(evt);
            }
        });
        jMenu1.add(saveas_dialog);

        generate_dialog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        generate_dialog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/xml-file-icon.png"))); // NOI18N
        generate_dialog.setText("Generar XML de salida");
        generate_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate_dialogActionPerformed(evt);
            }
        });
        jMenu1.add(generate_dialog);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void analize_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analize_buttonActionPerformed
        Analyzers.Parser parser;
        Analyzers.Scanner scanner;

        try {
            scanner = new Analyzers.Scanner(new StringReader(input_text.getText()));
            parser = new Analyzers.Parser(scanner);
            parser.parse();

            Output_title("ANÁLISIS LÉXICO");

            ArrayList<ArrayList<String>> Simbolos = scanner.getSimbolos();
            ArrayList<ArrayList<String>> Errores_lexicos = scanner.getErrores();

            for (ArrayList<String> v : Simbolos) {
                Output("(" + v.get(0) + ", " + v.get(1) + ") " + v.get(2) + " :  " + v.get(3));
            }

            if (!Errores_lexicos.isEmpty()) {
                Output_error("##Errores léxicos encontrados");

                for (ArrayList<String> v : Errores_lexicos) {
                    Output_error("(" + v.get(0) + ", " + v.get(1) + ") " + v.get(2));
                }

                Output_error("No se puede realizar el análisis léxico");

                // generar reporte de analisis lexico
                return;
            }

            Output_title("ANÁLISIS SINTÁCTICOS");

            ArrayList<ArrayList<String>> Conjuntos = parser.getConjuntos();
            ArrayList<ArrayList<String>> Expresiones = parser.getExpresiones();
            ArrayList<ArrayList<String>> Comparaciones = parser.getComparaciones();
            ArrayList<ArrayList<String>> Errores_sintacticos = parser.getErrores();

            Output_highlight("Conjuntos");

            for (ArrayList<String> v : Conjuntos) {
                Output(v.get(0) + " :  " + v.get(1));
            }
            Output_highlight("Expresiones");

            for (ArrayList<String> v : Expresiones) {
                String temp = "";

                for (String s : v) {
                    temp += s + "  ";
                }

                Output(temp);
            }

            Output_highlight("Comparaciones");

            for (ArrayList<String> v : Comparaciones) {
                Output(v.get(0) + " :  " + v.get(1));
            }

            // realizar metodo del arbol y demas
            // comprobar errores sintacticos
        } catch (Exception ex) {
            try {
                Output_error("Error fatal");
            } catch (BadLocationException ex1) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
            System.out.println(" >> " + ex.getCause());
        }


    }//GEN-LAST:event_analize_buttonActionPerformed

    private void generate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_buttonActionPerformed

    }//GEN-LAST:event_generate_buttonActionPerformed

    private void generate_dialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate_dialogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generate_dialogActionPerformed

    private void clear_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_buttonActionPerformed
        output_text.setText("");
    }//GEN-LAST:event_clear_buttonActionPerformed

    // ================================>>ACTIONS<<=========================================
    private void new_dialogActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_new_dialogActionPerformed

        if (saved == false && input_text.isEnabled()) {
            if (saveFileAs() == false) {
                return;
            }
        }

        input_text.setText("");

        if (!input_text.isEnabled()) {
            input_text.setEnabled(true);
            generate_button.setEnabled(true);
            analize_button.setEnabled(true);
        }

        Font font = file_name_label.getFont();
        font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
        file_name_label.setFont(font);

        unsaved_label.setVisible(false);
        saved = true;

        file_name = "";
        file_name_label.setText("unnamed.olc");
    }// GEN-LAST:event_new_dialogActionPerformed

    private void open_dialogActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_open_dialogActionPerformed

        if (saved == false) {

            int op = JOptionPane.showConfirmDialog(this, "¿Quieres guardar el archivo actual?", "Cambios no guardados", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (op == JOptionPane.YES_OPTION) {
                saveFileAs();
            } else if (op == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        FileInputStream inputStream = null;

        try {
            file = openFile(this);

            if (file != null) {

                inputStream = new FileInputStream(file);
                input_text.setText(readFromInputStream(inputStream));

                if (!input_text.isEnabled()) {
                    input_text.setEnabled(true);
                    generate_button.setEnabled(true);
                    analize_button.setEnabled(true);
                }

                Font font = file_name_label.getFont();
                font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
                file_name_label.setFont(font);
                setFileName(file.getName());

                unsaved_label.setVisible(false);
                saved = true;

                Output_success("Se cargó el archivo " + file.toString());
            }
        } catch (FileNotFoundException ex) {
            try {
                Output_error("No se pudo cargar el archivo");
            } catch (BadLocationException ex1) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }// GEN-LAST:event_open_dialogActionPerformed

    private void save_dialogActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_save_dialogActionPerformed

        try {
            if (file_name.isEmpty()) {
                if (saveFileAs() == true) {
                    Output_success("Se guardó exitosamente");
                    return;
                }

            } else {
                if (saveFile() == true) {
                    Output_success("Se guardó exitosamente");
                    return;
                }
            }
        } catch (BadLocationException ex) {
            try {
                Output_error("No se pudo guardar el archivo");
            } catch (BadLocationException ex1) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }// GEN-LAST:event_save_dialogActionPerformed

    private void saveas_dialogActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveas_dialogActionPerformed
        try {
            if (saveFileAs() == true) {
                Output_success("Se guardó exitosamente");
                return;
            }

            Output_error("No se pudo guardar el archivo");

        } catch (BadLocationException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_saveas_dialogActionPerformed

    private void image_labelMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_image_labelMouseClicked
        if (image_label.getIcon() != null) {
            ImageGUI img_frame = new ImageGUI();
            img_frame.setImage(image_label.getIcon());
            img_frame.setVisible(true);
        }
    }// GEN-LAST:event_image_labelMouseClicked

    private void input_textKeyTyped(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_input_textKeyTyped
        if (saved == true) {
            saved = false;
            Font font = file_name_label.getFont();
            font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_ULTRABOLD));
            file_name_label.setFont(font);
            unsaved_label.setVisible(true);
        }
    }// GEN-LAST:event_input_textKeyTyped

    // ================================>>MISC<<=========================================
    public void Output(String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) output_text.getDocument();
        document.insertString(document.getLength(), str + "\n", null);
    }

    public void Output_highlight(String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) output_text.getDocument();

        Style style = output_text.addStyle("highlight", null);
        StyleConstants.setForeground(style, Color.blue);
        StyleConstants.setItalic(style, true);
        StyleConstants.setFontSize(style, 14);

        str = ">>" + str;
        document.insertString(document.getLength(), str + "\n", style);
    }

    public void Output_title(String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) output_text.getDocument();

        Style style = output_text.addStyle("success", null);
        StyleConstants.setForeground(style, Color.cyan);
        StyleConstants.setFontSize(style, 15);

        str = " " + str + " ";

        int width = (108 - str.length()) / 2;

        for (int i = 0; i < width; i++) {
            str = "=" + str;
        }

        for (int i = 0; i < width; i++) {
            str = str + "=";
        }

        document.insertString(document.getLength(), str + "\n", style);
    }

    public void Output_success(String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) output_text.getDocument();

        Style style = output_text.addStyle("success", null);
        StyleConstants.setForeground(style, Color.green);

        document.insertString(document.getLength(), str + "\n", style);
    }

    public void Output_error(String str) throws BadLocationException {
        StyledDocument document = (StyledDocument) output_text.getDocument();

        Style style = output_text.addStyle("error", null);
        StyleConstants.setForeground(style, Color.red);

        document.insertString(document.getLength(), str + "\n", style);
    }

    public void setFileName(String text) {
        file_name = text;
        file_name_label.setText(file_name);
    }

    public JFileChooser fileChooser;

    private File openFile(final JFrame frame) {

        File file = null;

        fileChooser = new JFileChooser(main_path);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        FileNameExtensionFilter ff = new FileNameExtensionFilter("OLC Files", "olc");
        fileChooser.addChoosableFileFilter(ff);
        fileChooser.setFileFilter(ff);

        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
        }

        return file;
    }

    private Boolean saveFile() {

        if (saved == false) {

            BufferedWriter writer;

            try {
                writer = new BufferedWriter(new FileWriter(file, false));
                writer.flush();
                writer.write(input_text.getText());
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            Font font = file_name_label.getFont();
            font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
            file_name_label.setFont(font);
            unsaved_label.setVisible(false);
            saved = true;
        }

        return saved;
    }

    private Boolean saveFileAs() {

        fileChooser = new JFileChooser(main_path);

        BufferedWriter writer;
        String filename = "";
        int out = fileChooser.showSaveDialog(null);

        if (out == JFileChooser.APPROVE_OPTION) {
            try {
                file = fileChooser.getSelectedFile();

                filename = file.getName();
                if (!filename.toLowerCase().endsWith(".olc")) {
                    filename += ".olc";
                }
                writer = new BufferedWriter(new FileWriter(file, false));
                writer.write(input_text.getText());
                writer.close();

            } catch (IOException e) {
                e.printStackTrace();
            }

            Font font = file_name_label.getFont();
            font = font.deriveFont(Collections.singletonMap(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR));
            file_name_label.setFont(font);
            unsaved_label.setVisible(false);

            setFileName(filename);
            saved = true;
        }

        return saved;
    }

    // LEER ARCHIVO
    private String readFromInputStream(InputStream inputStream) throws IOException {
        StringBuilder resultStringBuilder = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = br.readLine()) != null) {
                resultStringBuilder.append(line).append("\n");
            }
        }
        return resultStringBuilder.toString();
    }

    // =================================>>MAIN<<===========================================
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton analize_button;
    private javax.swing.JToggleButton clear_button;
    private javax.swing.JTree data_tree;
    private javax.swing.JLabel file_name_label;
    private javax.swing.JToggleButton generate_button;
    private javax.swing.JMenuItem generate_dialog;
    private javax.swing.JComboBox<String> image_combobox;
    private javax.swing.JLabel image_label;
    private javax.swing.JTextArea input_text;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuItem new_dialog;
    private javax.swing.JToggleButton next_button;
    private javax.swing.JMenuItem open_dialog;
    private javax.swing.JTextPane output_text;
    private javax.swing.JToggleButton previous_button;
    private javax.swing.JMenuItem save_dialog;
    private javax.swing.JMenuItem saveas_dialog;
    private javax.swing.JLabel unsaved_label;
    // End of variables declaration//GEN-END:variables
}
